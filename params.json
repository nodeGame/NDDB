{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# NDDB\r\n\r\nNDDB provides a simple, lightweight NO-SQL database for node.js and the browser.\r\n\r\n---\r\n\r\nNDDB provides a simple, lightweight, NO-SQL object database \r\nfor node.js and the browser. It depends on JSUS.\r\n\r\nAllows to define any number of comparator and indexing functions, \r\nwhich are associated to any of the dimensions (i.e. properties) of \r\nthe objects stored in the database. \r\n\r\nWhenever a comparison is needed, the corresponding comparator function \r\nis called, and the database is updated.\r\n\r\nWhenever an object is inserted that matches one of the indexing functions\r\nan hash is produced, and the element is added to one of the indexes.\r\n\r\n\r\nAdditional features are: methods chaining, tagging, and iteration \r\nthrough the entries.\r\n\r\nNDDB is work in progress. Currently, the following methods are\r\nimplemented:\r\n\r\n  * Sorting and selecting:\r\n\r\n     - select, sort, reverse, last, first, limit, distinct, shuffle\r\n \r\n  * Custom callbacks\r\n \r\n     - map, each, filter\r\n \r\n  * Deletion\r\n \r\n     - remove, clear\r\n \r\n  * Advanced operations\r\n \r\n     - split, join, concat\r\n \r\n  * Fetching\r\n \r\n     - fetch, fetchArray, fetchKeyArray\r\n \r\n  * Statistics operator\r\n \r\n     - count, max, min, mean\r\n \r\n  * Diff\r\n \r\n     - diff, intersect\r\n\r\n  * Skim\r\n\r\n     - skim, keep\r\n \r\n  * Iterator\r\n \r\n     - previous, next, first, last\r\n\r\n  * Tagging\r\n \r\n     - tag\r\n        \r\n  * Updating\r\n  \r\n     - Update must be performed manually after a selection\r\n\r\n## Usage\r\n\r\nCreate an instance of NDDB\r\n\r\n```javascript\r\n    var NDDB = require('NDDB').NDDB;\r\n    var db = new NDDB();\r\n```\r\n\r\nInsert an item into the database\r\n\r\n```javascript\r\n    db.insert({\r\n        painter: \"Picasso\",\r\n        title: \"Les Demoiselles d'Avignon\",\r\n        year: 1907\r\n    });\r\n```\r\n\r\nImport a collection of items\r\n\r\n```javascript\r\n\r\n    var items = [\r\n        {\r\n            painter: \"Dali\",\r\n            title: \"Portrait of Paul Eluard\",\r\n            year: 1929,\r\n            portrait: true\r\n        },\r\n        {\r\n            painter: \"Dali\",\r\n            title: \"Barcelonese Mannequin\",\r\n            year: 1927\r\n        },\r\n        {\r\n            painter: \"Monet\",\r\n            title: \"Water Lilies\",\r\n            year: 1906\r\n        },\r\n        {\r\n            painter: \"Monet\",\r\n            title: \"Wheatstacks (End of Summer)\",\r\n            year: 1891\r\n        },\r\n        {\r\n            painter: \"Manet\",\r\n            title: \"Olympia\",\r\n            year: 1863\r\n        }\r\n    ];\r\n    \r\n    db.importDB(items);\r\n```\r\n    \r\nRetrieve the database size\r\n\r\n```javascript\r\n    var db_size = db.length; // 6\r\n ```\r\n    \r\nSelect all paintings from Dali\r\n\r\n```javascript\r\n    db.select('painter', '=', 'Dali'); // 2 items\r\n```\r\n    \r\nSelect all portraits\r\n\r\n```javascript\r\n    db.select('portrait'); // 1 item\r\n```\r\n    \r\nSelect all paintings from Dali that are before 1928\r\n\r\n```javascript\r\n    db.select('painter', '=', 'Dali')\r\n      .select('year', '<', 1928); // 1 item\r\n```\r\n\r\nSelect all paintings of the beginning of XX's century\r\n\r\n```javascript\r\n    db.select('year', '><', [1900, 1910]); // 2 items    \r\n```\r\n\r\n## Advanced commands\r\n\r\nDefine a global comparator function that sorts all the entries chronologically\r\n\r\n```javascript\r\n    db.globalCompator = function (o1, o2) {\r\n        if (o1.year < o2.year) return 1;\r\n        if (o1.year < o2.year) return 2;\r\n        return 0;\r\n    };\r\n```\r\n\r\nSort all the items (global comparator function is automatically used)\r\n\r\n```javascript\r\n    db.sort(); // Order: Manet, Monet, Monet, Picasso, Dali, Dali\r\n```\r\n\r\nReverse the order of the items\r\n\r\n```javascript\r\n    db.reverse(); // Order: Dali, Dali, Picasso, Monet, Monet, Manet\r\n```\r\n\r\nDefine a custom comparator function for the name of the painter, which gives highest priorities to the canvases of Picasso;\r\n\r\n```javascript\r\n    db.c('painter', function (o1, o2) {\r\n        if (o1.painter === 'Picasso') return -1;\r\n        if (o2.painter === 'Picasso') return 1;\r\n    }\r\n```\r\n   \r\nSort all the paintings by painter\r\n\r\n```javascript\r\n    db.sort('painter'); // Picasso is always listed first\r\n```\r\n\r\nDefine a custom index (hash) function for the name of the painter, which splits the inserted items according to the;\r\n    \r\n```javascript\r\n    db.h('painter', function(o) {\r\n        if (!o) return undefined;\r\n        return o.painter;\r\n    });\r\n    \r\n    db.rebuildIndexes();\r\n\r\n    db.length;          // 6, unchanged;\r\n    db.painter.Picasso; // NDDB with 1 element in db\r\n    db.painter.Monet    // NDDB with 2 elements in db\r\n    db.painter.Manet    // NDDB with 1 elements in db\r\n    db.painter.Dali     // NDDB with 2 elements in db\r\n```\r\n  \r\n\r\n## Example of Configuration object\r\n\r\n```javascript\r\n\r\n    var logFunc = function(txt, level) {\r\n      if (level > 0) {\r\n        console.log(txt);\r\n      }\r\n    };\r\n\r\n    var options = {\r\n      tags:  {},          // Collection of tags\r\n      update: {           // On every insert and remove:\r\n        indexes:  true,   // updates the indexes, if any  \r\n        sort:     true,   // sorts the items of the database \r\n        pointer:  true,   // moves the iterator pointer to the last inserted element\r\n      },\r\n      C:  {},             // Collection of comparator functions\r\n      H:  {},             // Collection of hashing functions\r\n      log: logFunc,       // Default stdout\r\n      nddb_pointer: 4,    // Set the pointer to element of index 4. \r\n    }\r\n    \r\n    var nddb = new NDDB(options);\r\n    \r\n    // or\r\n    \r\n    nddb = new NDDB();\r\n    nddb.init(options);\r\n```\r\n\r\n## Save and load from file\r\n\r\nOnly in the node.js environment, it is possible to save the state of the database to a file and load it afterwards.\r\n\r\n```javascript\r\n\r\n   // database exists and items inserted \r\n   db.save('./db.out');\r\n\r\n   var db2 = new NDDB();\r\n   db2.load('./db.out');\r\n```\r\n\r\n\r\n## Test\r\n\r\nNDDB relies on [mocha](http://visionmedia.github.com/mocha/) and [should.js](http://github.com/visionmedia/should.js) for testing.\r\n\r\n    $ npm install # will load all necessary dependencies\r\n    $ npm test # will run the test suite against nddb.js\r\n\r\n\r\n## Build\r\n\r\nCreate your customized build of NDDB using the make file in the `bin` directory\r\n\r\n```javascript\r\nnode make.nddb.js build // Standard build, about 28Kb minified\r\nnode make.nddb.js build -a -o nddb-full // Full build, about 40Kb minified\r\n```\r\n\r\n### Help\r\n\r\n```javascript\r\nnode make.nddb.js --help\r\n```\r\n\r\n## API Documentation\r\n\r\nCreate html API documentation using the make file in the bin directory  \r\n\r\n```javascript\r\nnode make.nddb.js doc\r\n```\r\n\r\n## ChangeLog\r\n\r\n### 0.3.0 \r\n\r\n  - NDDB.skim() and NDDB.keep()\r\n  - Full test coverage\r\n  - Make file in bin directory\r\n  - Custom builds\r\n  - Bug fixing\r\n\r\n### 0.2.5\r\n\r\n  - NDDB.distinct() + test\r\n  - Support for cyclic objects when saving the database to file\r\n  - NDDB.stddev()\r\n  - Bug fixing\r\n  - More tests\r\n\r\n### 0.2\r\n\r\n  - Introduced indexing. Indexes are created with NDDB.h() or the alias NDDB.hash()\r\n  - NDDB.set() was already deprecated and it has been removed. NDDB.c() or the alias NDDB.compare() should be used instead.\r\n  - NDDB.init() can sets the configuration of the database\r\n  \r\n## License\r\n\r\nCopyright (C) 2012 Stefano Balietti\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","name":"Nddb","tagline":"Javascript lightweight N-dimensional database","google":"UA-34089835-1"}
{"name":"Nddb","tagline":"Javascript lightweight N-dimensional database","body":"# NDDB\r\n\r\n[![Build Status](https://travis-ci.org/nodeGame/NDDB.png?branch=master)](https://travis-ci.org/nodeGame/NDDB)\r\n\r\nNDDB is a powerful and versatile object database for node.js and the browser.\r\n\r\n---\r\n\r\nNDDB (N-Dimensional DataBase) supports indexes, views, joins, basic statistics, custom operations, \r\nsaving and loading from file system and browser localStorage and much more.\r\n\r\nDeveloper-friendly thanks to an easy api, detailed documentation, and full unit tests coverage.\r\n\r\n## List of features\r\n\r\n- Selecting: `select`, `and`, `or`, `selexec`\r\n- Sorting: `sort`, `reverse`, `last`, `first`, `limit`, `distinct`, `shuffle`\r\n- Indexing: `index`, `hash`, `comparator`\r\n- Custom callbacks: `map`, `each`, `filter`\r\n- Updating and Deletion: `update`, `remove`, `clear`\r\n- Advanced operations: `split`, `join`, `concat`\r\n- Fetching and transformations: `fetch`, `fetchArray`, `fetchKeyArray`, `fetchValues`, `fetchSubObj`\r\n- Statistics operator: `count`, `max`, `min`, `mean`, `stddev`\r\n- Diff: `diff`, `intersect`\r\n- Skim: `skim`, `keep`\r\n- Iterator: `previous`, `next`, `first`, `last`\r\n- Tagging: `tag`\r\n- Event listener / emitter: `on`, `off`, `emit`\r\n- Saving and Loading: `save`, `load`, `load.csv`\r\n\r\nThe complete NDDB api documentation is available [here](http://nodegame.github.com/NDDB/docs/nddb.js.html).\r\n\r\n## Usage\r\n\r\nCreate an instance of NDDB\r\n\r\n```javascript\r\n    var NDDB = require('NDDB').NDDB;\r\n    var db = new NDDB();\r\n```\r\n\r\nInsert an item into the database\r\n\r\n```javascript\r\n    db.insert({\r\n        painter: \"Picasso\",\r\n        title: \"Les Demoiselles d'Avignon\",\r\n        year: 1907\r\n    });\r\n```\r\n\r\nImport a collection of items\r\n\r\n```javascript\r\n\r\n    var items = [\r\n        {\r\n            painter: \"Dali\",\r\n            title: \"Portrait of Paul Eluard\",\r\n            year: 1929,\r\n            portrait: true\r\n        },\r\n        {\r\n            painter: \"Dali\",\r\n            title: \"Barcelonese Mannequin\",\r\n            year: 1927\r\n        },\r\n        {\r\n            painter: \"Monet\",\r\n            title: \"Water Lilies\",\r\n            year: 1906\r\n        },\r\n        {\r\n            painter: \"Monet\",\r\n            title: \"Wheatstacks (End of Summer)\",\r\n            year: 1891\r\n        },\r\n        {\r\n            painter: \"Manet\",\r\n            title: \"Olympia\",\r\n            year: 1863\r\n        }\r\n    ];\r\n    \r\n    db.importDB(items);\r\n```\r\n    \r\nRetrieve the database size\r\n\r\n```javascript\r\n    var db_size = db.length; // 6\r\n ```\r\n    \r\nSelect all paintings from Dali\r\n\r\n```javascript\r\n    db.select('painter', '=', 'Dali'); // 2 items\r\n```\r\n    \r\nSelect all portraits\r\n\r\n```javascript\r\n    db.select('portrait'); // 1 item\r\n```\r\n    \r\nFetch all paintings from Dali that are before 1928\r\n\r\n```javascript\r\n    db.select('painter', '=', 'Dali')\r\n      .and('year', '<', 1928);\r\n      .execute() \r\n      .fetch(); // 1 item\r\n```\r\n\r\nFetch all paintings of the beginning of XX's century\r\n\r\n```javascript\r\n    db.select('year', '><', [1900, 1910])\r\n      .execute()\r\n      .fetch(); // 2 items    \r\n```\r\n\r\nFetch separately all the painters and all the dates of execution of the paintings\r\n\r\n```javascript\r\n    db.select('year', '><', [1900, 1910])\r\n      .execute() \r\n      .fetchValues(['painter', 'title']);\r\n\r\n// { painter: [ 'Jesus', 'Dali', 'Dali', 'Monet', 'Monet', 'Manet' ],\r\n//   year: [ 0, 1929, 1927, 1906, 1891, 1863 ] }\r\n```\r\n\r\n## Advanced commands\r\n\r\n### Sorting\r\n\r\nDefine a global comparator function that sorts all the entries chronologically\r\n\r\n```javascript\r\n    db.globalCompator = function (o1, o2) {\r\n        if (o1.year < o2.year) return 1;\r\n        if (o1.year < o2.year) return 2;\r\n        return 0;\r\n    };\r\n```\r\n\r\nSort all the items (global comparator function is automatically used)\r\n\r\n```javascript\r\n    db.sort(); // Order: Manet, Monet, Monet, Picasso, Dali, Dali\r\n```\r\n\r\nReverse the order of the items\r\n\r\n```javascript\r\n    db.reverse(); // Order: Dali, Dali, Picasso, Monet, Monet, Manet\r\n```\r\n\r\nDefine a custom comparator function for the name of the painter, which gives highest priorities to the canvases of Picasso;\r\n\r\n```javascript\r\n    db.c('painter', function (o1, o2) {\r\n        if (o1.painter === 'Picasso') return -1;\r\n        if (o2.painter === 'Picasso') return 1;\r\n    }\r\n```\r\n   \r\nSort all the paintings by painter\r\n\r\n```javascript\r\n    db.sort('painter'); // Picasso is always listed first\r\n```\r\n\r\n### Views\r\n\r\nSplits the database in sub-database, each containing semantically consistent set of entries\r\n\r\n```javascript\r\n  \r\n    // Let us add some cars to our previous database of paintings\r\n    var not_art_items = [\r\n        {\r\n          car: \"Ferrari\",\r\n          model: \"F10\",\r\n          speed: 350,\r\n        },\r\n        {\r\n          car: \"Fiat\",\r\n          model: \"500\",\r\n          speed: 100,\r\n        },\r\n        {\r\n          car: \"BMW\",\r\n          model: \"Z4\",\r\n          speed: 250,\r\n        },\r\n    ];\r\n  \r\n    db.view('art', function(o) {\r\n      return o.painter;\r\n    });\r\n    \r\n    db.view('cars', function(o) {\r\n      return o.car;\r\n    });\r\n      \r\n    db.rebuildIndexes();\r\n    \r\n    db.length;          // 9\r\n    db.art.length;      // NDDB with 6 art entries\r\n    db.cars.length;     // NDDB with 3 car entries\r\n    \r\n```  \r\n\r\n### Hashing\r\n\r\nDefine a custom hash function that creates a new view on each of the painters in the database;\r\n    \r\n```javascript\r\n    db.hash('painter', function(o) {\r\n        if (!o) return undefined;\r\n        return o.painter;\r\n    });\r\n    \r\n    db.rebuildIndexes();\r\n\r\n    db.length;          // 6, unchanged;\r\n    db.painter.Picasso; // NDDB with 1 element in db\r\n    db.painter.Monet    // NDDB with 2 elements in db\r\n    db.painter.Manet    // NDDB with 1 elements in db\r\n    db.painter.Dali     // NDDB with 2 elements in db\r\n```\r\n\r\n### Listenting to events\r\n\r\nListen to the `insert` event and modify the inserted items by adding an external index to them;\r\n    \r\n```javascript\r\n\r\n    var id = 0;\r\n    function getMyId(){ return id++; };\r\n    \r\n    db.on('insert', function(o) {\r\n        o.painter.id = getMyId();\r\n    });\r\n```  \r\n  \r\n### Indexes\r\n\r\nDefine a custom indexing function that gives fast, direct access to the items of the database;\r\n    \r\n```javascript\r\n    db.index('pid', function(o) {\r\n        return o.id;\r\n    });\r\n    \r\n    db.rebuildIndexes();\r\n    \r\n    db.pid.get(0).name; // Picasso\r\n    \r\n    db.pid.update(0, {\r\n      comment: \"Good job Pablo!\"\r\n    });\r\n    \r\n    // Changes are reflected in the main database    \r\n    db.selexec('comment').count(); // 1\r\n    \r\n    var picasso = db.pid.pop(0);\r\n    db.length; //(-1)\r\n    \r\n    // Get all available keys in the index\r\n    db.painter.getAllKeys(); // ['0','1', ... ]\r\n    \r\n    // Get all elements indexed by their key in one object\r\n    db.painter.getAllKeyElements(); \r\n\r\n```  \r\n\r\n\r\n## Example of a configuration object\r\n\r\n```javascript\r\n\r\n    var logFunc = function(txt, level) {\r\n      if (level > 0) {\r\n        console.log(txt);\r\n      }\r\n    };\r\n\r\n    var options = {\r\n      tags:  {},          // Collection of tags\r\n      update: {           // On every insert, remove and update:\r\n        indexes:  true,   // updates the indexes, if any  \r\n        sort:     true,   // sorts the items of the database \r\n        pointer:  true,   // moves the iterator pointer to the last inserted element\r\n      },\r\n      C:  {},             // Collection of comparator functions\r\n      H:  {},             // Collection of hashing functions\r\n      I:  {},             // Collection of indexing functions\r\n      V:  {},             // Collection of view functions\r\n      log: logFunc,       // Default stdout\r\n      nddb_pointer: 4,    // Set the pointer to element of index 4. \r\n      operators: {       // Extends NDDB with new operators for select queries\r\n        '%': function(d, value, comparator){\r\n              return function(elem) {\r\n                if ((elem[d] % value) === 0) {\r\n                  return elem;\r\n                }\r\n              }\r\n      }\r\n    }\r\n    \r\n    var nddb = new NDDB(options);\r\n    \r\n    // or\r\n    \r\n    nddb = new NDDB();\r\n    nddb.init(options);\r\n```\r\n\r\n## Save and load from file or to localStorage\r\n\r\nIn the node.js environment, it is possible to save the state of the database to a file and load it afterwards.\r\n\r\n```javascript\r\n\r\n   // database exists and items inserted \r\n   db.save('./db.out');\r\n\r\n   var db2 = new NDDB();\r\n   db2.load('./db.out');\r\n```\r\n\r\nThe above command are valid also in the browser environment if [Shelf.js](https://github.com/shakty/shelf.js) is loaded. A string id instead of the path to a file must be given instead.\r\n\r\n## Test\r\n\r\nNDDB relies on [mocha](http://visionmedia.github.com/mocha/) and [should.js](http://github.com/visionmedia/should.js) for testing.\r\n\r\n    $ npm install # will load all necessary dependencies\r\n    $ npm test # will run the test suite against nddb.js\r\n\r\n\r\n## Build\r\n\r\nCreate your customized build of NDDB using the make file in the `bin` directory\r\n\r\n```javascript\r\nnode make.nddb.js build // Standard build, \r\nnode make.nddb.js build -a -o nddb-full // Full build\r\n```\r\n\r\n### Help\r\n\r\n```javascript\r\nnode make.nddb.js --help\r\n```\r\n\r\n## API Documentation\r\n\r\nCreate html API documentation using the make file in the bin directory  \r\n\r\n```javascript\r\nnode make.nddb.js doc\r\n```\r\n\r\n## ChangeLog\r\n\r\n### 0.8.2\r\n\r\n  - NDDBIndexes: `#getAllKeys()` and `#getAllKeyElements`\r\n  - Integration with updated version of Shelf.js\r\n  - Minor fixes\r\n\r\n### 0.8.0\r\n\r\n  - New faster and more powerful indexing engine\r\n  - Indexes are now objects with own methods: `#get()`, `#update()`, `#pop()`, `#size()`\r\n  - Support for multiple _views_ on the database\r\n  - `#comparator()` becomes `#getComparator()`, and `#compare()` becomes `#comparator()`\r\n  - Deprecated `c`,`h`,`i`; use human readable `comparator`, `hash`, `index` from now on!\r\n  - `#current()` replaces the old `#get()`\r\n  - `#get()` always returns the element at the specified ordinal position in the database\r\n  - Callback functions of hash and index functions must always be specified\r\n  - Hash functions creates NDDB instances of constructor\r\n  \r\n\r\n### 0.7.2\r\n\r\n  - #selexec() shorthand  for select().execute()\r\n  - Fixed bug on emit('update')\r\n  - #tag() returns the tagged element\r\n  - #clear() removes all volatile data, not just the entries in the database\r\n  - Minor doc improvements\r\n\r\n### 0.7.0\r\n\r\n  - More efficient selector engine. \r\n  - Select queries can be chained with and, and or methods\r\n  - Select queries are executed with an execute method\r\n  - Objects are not maskeraded at insertation (no hidden .nddbid property injected)\r\n  - Remove method does not remove the elements in parent database\r\n  - Constructor changed, no parent parameter\r\n\r\n### 0.6.0\r\n\r\n  - fetch accepts no arguments\r\n  - fetchValues returns an object containing all the values in the grouped by property\r\n  - fetchSubObj\r\n  - fetchArray and fetchKeyArray operate only on the first level, and objects in properties are not further flattened\r\n  - fetchArray, fetchKeyArray, and fetchValues accept either a string or an array of strings as key-selector parameter\r\n\r\n### 0.5.8\r\n\r\n  - Serialization of functions, null and undefined values\r\n  - Removed eval from select queries\r\n  - Travis-ci continous integration\r\n  - Minor bug fixing\r\n\r\n### 0.5.0\r\n\r\n  - Support for events: 'remove', 'insert'\r\n  - NDDB.index(): provides fast access to objects\r\n  - NDDB.tag(): accepts also objects\r\n\r\n### 0.4.0\r\n\r\n  - IE compatibility\r\n  - Bug fixing\r\n\r\n### 0.3.6\r\n\r\n  - Bug fixing\r\n  - NDDB.save beautifies the output by default\r\n  - Post install scripts build the libraries\r\n\r\n### 0.3.0 \r\n\r\n  - NDDB.skim() and NDDB.keep()\r\n  - Full test coverage\r\n  - Make file in bin directory\r\n  - Custom builds\r\n  - Bug fixing\r\n\r\n### 0.2.5\r\n\r\n  - NDDB.distinct() + test\r\n  - Support for cyclic objects when saving the database to file\r\n  - NDDB.stddev()\r\n  - Bug fixing\r\n  - More tests\r\n\r\n### 0.2\r\n\r\n  - Introduced indexing. Indexes are created with NDDB.h() or the alias NDDB.hash()\r\n  - NDDB.set() was already deprecated and it has been removed. NDDB.c() or the alias NDDB.compare() should be used instead.\r\n  - NDDB.init() can sets the configuration of the database\r\n  \r\n## License\r\n\r\nCopyright (C) 2012 Stefano Balietti\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-34089835-1","note":"Don't delete this file! It's used internally to help with page regeneration."}